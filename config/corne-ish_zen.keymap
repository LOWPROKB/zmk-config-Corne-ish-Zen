
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    combos {
        compatible = "zmk,combos";
        jk_esc {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp ESC>;
        };
    };
};
/ {
        // behaviors {
        //   bspc_del: backspace_delete {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "BACKSPACE_DELETE";
        //     #binding-cells = <0>;
        //     bindings = <&kp BACKSPACE>, <&kp DELETE>;
        //     mods = <(MOD_LSFT|MOD_RSFT)>;
        //   };
        //   n_prev_grave: next_prev_grave { 
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "NEXT_PREVIOUS";
        //     #binding-cells = <0>;
        //     bindings = <&mt C_NEXT GRAVE>, <&kp C_PREV>;
        //     mods = <(MOD_LSFT|MOD_RSFT)>;
        //   };
        //   td_cmd_del: tap_dance_cmd_del {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "TAP_DANCE_COMMAND_DEL";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <200>;
        //     bindings = <&mt LGUI BSPC>, <&key_repeat BSPC>;
        //   };
        // };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "QWERTY";
                        bindings = <
&mt C_PP TAB  &kp Q &kp W &kp E &kp R        &kp T       &kp Y   &kp U     &kp I     &kp O   &kp P    &kp GRAVE
&mt LCTRL ESC &kp A &kp S &kp D &kp F        &kp G       &kp H   &kp J     &kp K     &kp L   &kp SEMI &kp SQT
&kp LSHFT     &kp Z &kp X &kp C &kp V        &kp B       &kp N   &kp M     &kp COMMA &kp DOT &kp FSLH &kp RALT
                          &sl 1 &mt LALT BSPC  &sk LGUI    &kp RET &kp SPACE &sl 2
                        >;
                };
                
                lower_layer {
                        label = "NUMBER";
                        bindings = <
&kp TAB    &kp F1       &kp F2       &kp F3       &kp F4       &kp F5         &kp F6     &kp F7   &kp F8 &kp F9 &kp F10 &kp F11
&kp GRAVE  &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6     &kp N7   &kp N8 &kp N9 &kp N0  &kp F12
&sk LSHIFT &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &bt BT_CLR &trans   &trans &trans &trans  &trans
                       	             &to 0        &trans       &trans         &trans     &trans   &mo 3
                        >;
                };

                raise_layer {
                        label = "SYMBOL";
                        bindings = <
&kp GRAVE &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT  &kp CARET &kp AMPS  &kp STAR  &kp LPAR &kp RPAR &kp BSPC
&kp LCTRL &trans   &trans &trans   &trans   &kp LPAR   &kp RPAR  &kp MINUS &kp EQUAL &kp RBKT &kp BSLH &kp GRAVE
&kp LSHFT &trans   &trans &trans   &trans   &LBKT      &kp RBKT  &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                          &to 0    &trans   &trans     &trans    &trans    &trans
                        >;
                };
                
                nav_layer {
                        label = "NAV";
                        bindings = <
&trans &trans &trans &trans &trans &trans   &to 4  &trans   &kp UP    &trans    &trans &trans
&trans &trans &trans &trans &trans &trans   &trans &kp LEFT &kp DOWN  &kp RIGHT &trans &trans 
&trans &trans &trans &trans &trans &trans   &trans &trans   &trans    &trans    &trans &trans 
                     &to 0  &trans &trans   &trans &trans   &trans
                        >;
                };
                game_layer {
                        label = "GAME";
                        bindings = <
&kp TAB       &kp Q &kp W &kp E &kp R         &kp T       &kp Y   &kp U     &kp I     &kp O   &kp P    &kp GRAVE
&mt ESC LCTRL &kp A &kp S &kp D &kp F         &kp G       &kp H   &kp J     &kp K     &kp L   &kp SEMI &kp SQT
&kp LSHFT     &kp Z &kp X &kp C &kp V         &kp B       &kp N   &kp M     &kp COMMA &kp DOT &kp FSLH &kp RALT
                          &to 0 &mt LALT BSPC &kp SPACE   &kp RET &kp SPACE &sl 2
                        >;
                };

        };
};
