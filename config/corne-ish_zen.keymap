/*
*
* Copyright (c) 2022 Andrew Escay
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define _COLEMAK 0
#define _MOVE 1
#define _SYMBOLS 2
#define _NUMBERS 3
#define _WINDOW 4

/ {
        behaviors {
		meh: behavior_meh {
			compatible = "zmk,modified-key-press";
			label = "MEH";
			#binding-cells = <1>;
			modifiers = MOD_GUI | MOD_LSFT | MOD_LCTL;
		};
                td_caps: tap_dance_caps {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_CAPS";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp LSHFT>, <&kp CAPS>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "COLEMAK";
// -----------------------------------------------------------------------------------------
// |  ESC |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  ;  | BKSP |
// |  TAB |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |  '   |
// |      |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  | ENT  |
//                    | WIN | MEH | CPS |   | SPC | SYM  | NUM |
                        bindings = <
   &kp ESC &kp Q &kp W       &kp F       &kp P      &kp B      &kp J     &kp L        &kp U        &kp Y       &kp SEMI &kp BSPC
   &kp TAB &kp A &mt LCTRL R &mt LALT S  &mt LGUI T &kp G      &kp M     &mt RGUI N   &mt RALT E   &mt RCTRL I &kp O    &kp SQT
   &none   &kp Z &kp X       &kp C       &kp D      &kp V      &kp K     &kp H        &kp COMMA    &kp DOT     &kp FSLH &kp RET
                             &to _WINDOW &meh       &td_caps   &kp SPACE &sl _SYMBOLS &to _NUMBERS
                        >;
                };

                move_layer {
                        label = "MOVE";
// -----------------------------------------------------------------------------------------
// |      |     |     |           |      |           |   | PREV | PREV_TAB | NEXT_TAB | NEXT |     |      |
// | BTCLR| BT1 | BT2 |    BT3    | BT4  | BT5       |   | LFT  | DWN      |  UP      | RGT  |     |      |
// |      |     |     |           |      | LSFT(ALT) |   |      |          |          |      |     |      |
//                    | LSFT(CTL) | CLMK |           |   | RGUI |          |          |
                        bindings = <
   &trans     &none        &none        &none         &none        &none          &kp LG(LBKT) &kp LC(LS(TAB)) &kp LC(TAB) &kp LG(RBKT) &none &trans
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2  &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT     &kp DOWN        &kp UP      &kp RIGHT    &none &none
   &none      &none        &none        &none         &none        &kp LS(LALT)   &none        &none           &none       &none        &none &trans
                    	                &kp LS(LCTRL) &to _COLEMAK &none          &kp RGUI     &none           &none
                        >;
                };

                symbol_layer {
                        label = "SYMBOLS";
// -----------------------------------------------------------------------------------------
// |      |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |     |     |      |
// |      |  ~  |  =  |  -  |  _  |  `  |   |  \  |  (  |  )  | "|" |     |      |
// |      |     |     |     |     |     |   |  {  |  [  |  ]  |  }  |     |      |
//                    |     | CLMK|     |   |     | MOVE|     |
                        bindings = <
   &trans &kp EXCL  &kp AT    &kp HASH  &kp DLLR     &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &none    &none &trans
   &trans &kp TILDE &kp EQUAL &kp MINUS &kp UNDER    &kp GRAVE   &kp BSLH  &kp LPAR  &kp RPAR        &kp PIPE &none &none
   &none  &none     &none     &none     &none        &none       &kp LBRC  &kp LBKT  &kp RBKT        &kp RBRC &none &trans
                    	      &none     &to _COLEMAK &none       &none     &to _MOVE &none
                        >;
                };

                number_layer {
                        label = "NUMBERS";
// -----------------------------------------------------------------------------------------
// |    |     | PLY | PRV | NXT |     |   |  +  |  7  |  8  |  9  |  -  |      |
// |    |     |     | VLD | VLU |     |   |  *  |  4  |  5  |  6  |  /  |      |
// |    |     |     | BRD | BRU |     |   |     |  1  |  2  |  3  |  =  |      |
//                  |     | CLMK|     |   |     |  0  |  . |
                        bindings = <
   &trans &none &kp C_PP &kp C_PREV   &kp C_NEXT   &none    &kp PLUS &kp N7 &kp N8  &kp N9 &kp MINUS &trans
   &trans &none &none    &kp C_VOL_DN &kp C_VOL_UP &none    &kp STAR &kp N4 &kp N5  &kp N6 &kp SLASH &none
   &none  &none &none    &kp C_BRI_DN &kp C_BRI_UP &none    &none    &kp N1 &kp N2  &kp N3 &kp EQUAL &trans
                         &none        &to _COLEMAK &none    &none    &kp N0 &kp DOT
                        >;
                };

                window_layer {
                        label = "WINDOW";
// -----------------------------------------------------------------------------------------
// | PSCRN|     | LWIN | TOP  | RWIN  |     |   |     |  Q4 |  Q1 |   |     |      |
// |      |     | LEFT | DOWN | RIGHT |     |   |     |  Q3 |  Q2 |   |     |      |
// |      |     |      |      |       |     |   |     |     |     |   |     |      |
//                     |      | CLMK  |     |   |     |     |     |
                        bindings = <
   &kp PSCRN &none &kp LA(LC(LG(LEFT))) &kp LA(LC(UP))   &kp LA(LC(LG(RIGHT))) &none   &none &kp LA(LC(U) &kp LA(LC(I)) &none &none &trans
   &none     &none &kp LA(LC(LEFT))     &kp LA(LC(DOWN)) &kp LA(LC(RIGHT))     &none   &none &kp LA(LC(J) &kp LA(LC(K)) &none &none &none
   &none     &none &none                &none            &none                 &none   &none &none        &none         &none &none &trans
                    	                &none            &to _COLEMAK          &none   &none &none        &none
                        >;
                };
        };
};
